import { sql } from "drizzle-orm";
import { pgTable, text, varchar, timestamp, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const transcripts = pgTable("transcripts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  content: text("content").notNull(),
  filename: text("filename"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const summaries = pgTable("summaries", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  transcriptId: varchar("transcript_id").notNull().references(() => transcripts.id),
  prompt: text("prompt").notNull(),
  content: text("content").notNull(),
  editedContent: text("edited_content"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const emailShares = pgTable("email_shares", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  summaryId: varchar("summary_id").notNull().references(() => summaries.id),
  recipients: text("recipients").notNull(), // JSON array of email addresses
  subject: text("subject").notNull(),
  message: text("message"),
  includeTranscript: boolean("include_transcript").default(false),
  sentAt: timestamp("sent_at").defaultNow().notNull(),
});

export const insertTranscriptSchema = createInsertSchema(transcripts).omit({
  id: true,
  createdAt: true,
});

export const insertSummarySchema = createInsertSchema(summaries).omit({
  id: true,
  createdAt: true,
  content: true, // Content is generated by AI, not provided in request
}).extend({
  content: z.string().optional(), // Make content optional for creation
});

export const insertEmailShareSchema = createInsertSchema(emailShares).omit({
  id: true,
  sentAt: true,
});

export type InsertTranscript = z.infer<typeof insertTranscriptSchema>;
export type InsertSummary = z.infer<typeof insertSummarySchema>;
export type InsertEmailShare = z.infer<typeof insertEmailShareSchema>;

export type Transcript = typeof transcripts.$inferSelect;
export type Summary = typeof summaries.$inferSelect;
export type EmailShare = typeof emailShares.$inferSelect;
